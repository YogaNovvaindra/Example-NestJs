{
	"info": {
		"_postman_id": "27496d0d-452b-4495-a09c-966493db7bb4",
		"name": "Example-NestJs",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Root",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9504e411-1e5b-4ca6-a248-38f4f93987c4",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "eec68cb4-dc31-41b8-9147-aa9c9983e360",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}",
				"description": "### GET Request\n\nThis endpoint makes an HTTP GET request to {{URL}}.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: text/html\n    \n- Body: \"Hello World!\""
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bef2e77b-3dd1-4e68-b13d-b9aacf71a204",
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null;\r",
							"});\r",
							"\r",
							"var token = pm.response.json().token;\r",
							"pm.environment.set(\"Token\", token);\r",
							"pm.test(\"Token is set in the environment variable 'Token'\", function () {\r",
							"    var tokenValue = pm.environment.get(\"Token\");\r",
							"    pm.expect(tokenValue).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be set in the environment\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a1af95d4-59b1-4992-b0ad-212db60ece13",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"example@gmail.com\",\r\n    \"password\" : \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/auth/register",
				"description": "### Register User\n\nThis endpoint is used to register a new user.\n\n#### Request Body\n\n- email (string, required): The email of the user.\n    \n- password (string, required): The password for the user account.\n    \n\n#### Response (application/json)\n\nThe response will be a JSON object with the following properties:\n\n- message (string): A message regarding the registration status.\n    \n- token (string): A token for the registered user.\n    \n- data (array): An array containing additional data related to the registration.\n    \n\n#### JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"token\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"array\"\n        }\n    }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d40ea9a3-8505-4052-bb59-5abb417a2771",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null;\r",
							"});\r",
							"\r",
							"var token = pm.response.json().token;\r",
							"pm.environment.set(\"Token\", token);\r",
							"pm.test(\"Token is set in the environment variable 'Token'\", function () {\r",
							"    var tokenValue = pm.environment.get(\"Token\");\r",
							"    pm.expect(tokenValue).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be set in the environment\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "5d9dc6d1-2e90-4908-a095-6b071f73c2ce",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"example@gmail.com\",\r\n    \"password\" : \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/auth/login",
				"description": "### Auth Login\n\nThis endpoint is used to authenticate a user by providing their email and password.\n\n#### Request Body\n\n- email (string, required): The email of the user.\n    \n- password (string, required): The password of the user.\n    \n\n#### Response (application/json)\n\nThe response will be a JSON object with the following properties:\n\n- message (string): A message related to the authentication status.\n    \n- token (string): The authentication token for the user.\n    \n- data (array): An array of additional data related to the authentication.\n    \n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"token\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"array\"\n        }\n    }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Create Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});\r",
							"\r",
							"var postid = pm.response.json().data.id;\r",
							"pm.environment.set(\"PostId\", postid);\r",
							"pm.test(\"Post Id is set in the environment variable 'PostId'\", function () {\r",
							"    var PostIdValue = pm.environment.get(\"PostId\");\r",
							"    pm.expect(PostIdValue).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"PostId should be set in the environment\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "18b5196f-3a4e-41f3-a424-de3264df30df",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"post 1\",\r\n    \"content\": \"content 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/posts",
				"description": "The `/posts` endpoint allows you to create a new post by sending an HTTP POST request with the title and content in the request body.\n\n### Request Body\n\n- `title` (string, required): The title of the post.\n    \n- `content` (string, required): The content of the post.\n    \n\n### Response\n\nThe response will have a status code of 201 and a JSON content type. The response body will follow the JSON schema below:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\"\n                },\n                \"content\": {\n                    \"type\": \"string\"\n                },\n                \"published\": {\n                    \"type\": \"boolean\"\n                },\n                \"createdAt\": {\n                    \"type\": \"string\"\n                },\n                \"updatedAt\": {\n                    \"type\": \"string\"\n                },\n                \"authorId\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get All Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a9eca12a-9f98-44cf-875a-dbf1a94300b1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/posts",
				"description": "### Get Posts\n\nThis endpoint retrieves a list of posts.\n\n#### Request Body\n\nThis is a GET request and does not require a request body.\n\n#### Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n##### Data\n\n- `id` (string) - The unique identifier of the post.\n    \n- `title` (string) - The title of the post.\n    \n- `content` (string) - The content of the post.\n    \n- `published` (boolean) - Indicates if the post is published.\n    \n- `createdAt` (string) - The timestamp when the post was created.\n    \n- `updatedAt` (string) - The timestamp when the post was last updated.\n    \n- `authorId` (string) - The unique identifier of the author of the post.\n    \n- `author`\n    - `id` (string) - The unique identifier of the author.\n        \n    - `email` (string) - The email address of the author.\n        \n\nThe response contains an array of post objects, each including the post details and the author's information."
			},
			"response": []
		},
		{
			"name": "Get Post By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "fce40aee-ac57-4411-b88e-3309dfe9adf6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/posts/{{PostId}}"
			},
			"response": []
		},
		{
			"name": "Update Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f7700826-3308-4c0a-aad5-55575b4bb7c8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"post 1\",\r\n    \"content\": \"content 1\",\r\n    \"published\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/posts/{{PostId}}"
			},
			"response": []
		},
		{
			"name": "Create Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});\r",
							"\r",
							"var commentid = pm.response.json().data.id;\r",
							"pm.environment.set(\"CommentId\", commentid);\r",
							"pm.test(\"Comment Id is set in the environment variable 'commentId'\", function () {\r",
							"    var CommentIdValue = pm.environment.get(\"CommentId\");\r",
							"    pm.expect(CommentIdValue).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"CommentId should be set in the environment\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7d1d78ff-94a2-4fd6-ba70-2b6aefa1f8d3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postId\" : \"{{PostId}}\",\r\n    \"content\": \"comment 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/comments"
			},
			"response": []
		},
		{
			"name": "Update Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f090b734-eb3e-44a7-af73-62a086af7f8b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postId\" : \"{{PostId}}\",\r\n    \"content\": \"comment apa ini\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/comments/{{CommentId}}"
			},
			"response": []
		},
		{
			"name": "Get Comment By Post Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "e7067dde-c8a9-49b6-9402-29952600feda",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/comments/post/{{PostId}}"
			},
			"response": []
		},
		{
			"name": "Delete Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9635b7e5-a5cf-4d5e-8af8-3b23949102d9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postId\" : \"{{PostId}}\",\r\n    \"content\": \"comment apa ini\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/comments/{{CommentId}}"
			},
			"response": []
		},
		{
			"name": "Delete Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "681454c3-8b44-45c7-be75-10b024601048",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response data is not null\", function () {\r",
							"  pm.expect(pm.response.json().data).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3e3387da-251e-4d9d-8b68-990ea2beb1a3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\" : \"post 1\",\r\n    \"content\": \"content 1\",\r\n    \"published\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/posts/{{PostId}}"
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d40ea9a3-8505-4052-bb59-5abb417a2771",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "92afe451-2331-4715-9858-f891243ab804",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Token}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"hehe@gmail.com\",\r\n    \"password\" : \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/auth/logout"
			},
			"response": []
		}
	]
}